
CREATE FUNCTION public.set_current_timestamp_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  _new record;
BEGIN
  _new := NEW;
  _new."updated_at" = NOW();
  RETURN _new;
END;
$$;

-- Create an "url" Postgres type that is an alias for "text"
-- Which validates the input is an URL
CREATE DOMAIN url AS text
    CHECK (VALUE ~ 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)');
COMMENT ON DOMAIN url IS 'Match URLs (http or https)';


CREATE TABLE address (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL,

    user_id int NOT NULL,

    city text NOT NULL,
    state text NOT NULL,
    -- Use text for zipcode to handle ZIP+4 extended zipcodes
    zipcode text NOT NULL,
    address_line_one text NOT NULL,
    address_line_two text
);

COMMENT ON TABLE address IS
    'A physical billing/shipping address, attached to a user account';


CREATE TABLE category (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL,

    name text NOT NULL UNIQUE,
    description text
);


CREATE TABLE product (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL,

    name text NOT NULL,
    -- Do we want description to be mandatory?
    description text,
    category text NOT NULL,
    brand text,
    price numeric NOT NULL,
    -- TODO: Make "product_image_url" table and one-to-many relationship from product -> product_image_url
    -- The Kaggle data just came with it in this format so we can hackily (ab)use JSONB for shitty relationships
    image_urls jsonb
);


CREATE TABLE product_category (
    product_id int NOT NULL,
    category_id int NOT NULL
);


CREATE TABLE "user" (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL,

    email text NOT NULL UNIQUE,
    password text NOT NULL
);

COMMENT ON TABLE "user" IS
    'Someone with an account on the site, who uses it to make purchases';

COMMENT ON COLUMN "user".password IS
    'A bcrypt-hashed version of the user password, compared against securely in the JWT Auth API handler for sign-in';



ALTER TABLE ONLY public.address
    ADD CONSTRAINT address_user_id_fkey
    FOREIGN KEY (user_id) REFERENCES public.user (id);




ALTER TABLE ONLY public.product_category
    ADD CONSTRAINT product_category_product_id_fkey
    FOREIGN KEY (product_id) REFERENCES public.product (id);

ALTER TABLE ONLY public.product_category
    ADD CONSTRAINT product_category_category_id_fkey
    FOREIGN KEY (category_id) REFERENCES public.category (id);



CREATE TRIGGER set_address_updated_at
    BEFORE UPDATE ON public.address
    FOR EACH ROW
    EXECUTE FUNCTION public.set_current_timestamp_updated_at();
CREATE TRIGGER set_category_updated_at
    BEFORE UPDATE ON public.category
    FOR EACH ROW
    EXECUTE FUNCTION public.set_current_timestamp_updated_at();

CREATE TRIGGER set_product_updated_at
    BEFORE UPDATE ON public.product
    FOR EACH ROW
    EXECUTE FUNCTION public.set_current_timestamp_updated_at();

CREATE TRIGGER set_user_updated_at
    BEFORE UPDATE ON public.user
    FOR EACH ROW
    EXECUTE FUNCTION public.set_current_timestamp_updated_at();
